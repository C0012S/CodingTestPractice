"""
<문제> 떡볶이 떡 만들기 : 문제 설명
- 오늘 동빈이는 여행 가신 부모님을 대신해서 떡집 일을 하기로 했습니다. 오늘은 떡볶이 떡을 만드는 날입니다. 동빈이네 떡볶이 떡은 재밌게도 떡볶이 떡의 길이가 일정하지 않습니다. 대신에 한 봉지 안에 들어가는 떡의 총 길이는 절단기로 잘라서 맞춰 줍니다.
- 절단기에 높이(H)를 지정하면 줄지어진 떡을 한 번에 절단합니다. 높이가 H보다 긴 떡은 H 위의 부분이 잘릴 것이고, 낮은 떡은 잘리지 않습니다.
- 예를 들어 높이가 19, 14, 10, 17cm인 떡이 나란히 있고 절단기 높이를 15cm로 지정하면 자른 뒤 떡의 높이는 15, 14, 10, 15cm가 될 것입니다. 잘린 떡의 길이는 차례대로 4, 0, 0, 2cm입니다. 손님은 6cm만큼의 길이를 가져갑니다.
- 손님이 왔을 때 요청한 총 길이가 M일 때 적어도 M만큼의 떡을 얻기 위해 절단기에 설정할 수 있는 높이의 최댓값을 구하는 프로그램을 작성하세요.


<문제> 떡볶이 떡 만들기 : 문제 조건
난이도 ●●○ | 풀이 시간 40 분 | 시간 제한 2 초 | 메모리 제한 128MB

- 입력 조건
  - 첫째 줄에 떡의 개수 N과 요청한 떡의 길이 M이 주어집니다. (1 <= N <= 1,000,000, 1 <= M <= 2,000,000,000)
  - 둘째 줄에는 떡의 개별 높이가 주어집니다. 떡 높이의 총합은 항상 M 이상이므로, 손님은 필요한 양만큼 떡을 사갈 수 있습니다. 높이는 10억보다 작거나 같은 양의 정수 또는 0입니다.
    
- 출력 조건
  - 적어도 M만큼의 떡을 집에 가져가기 위해 절단기에 설정할 수 있는 높이의 최댓값을 출력합니다.
"""

N, M = map(int, input().split()) # 떡의 개수 N # 떡의 길이 M
H = list(map(int, input().split())) # 떡의 개별 높이

# 가장 긴 떡의 높이를 처음 절단기 높이로 설정
set = H[0] # 가장 긴 떡의 높이 set # 처음에는 처음 떡의 높이
# 가장 긴 떡의 높이 찾는 과정
for i in range(len(H) - 1):
  if (set > H[i + 1]):
    continue
  else:
    set = H[i + 1]

sum = 0 # 떡 높이의 총합 sum
while (sum < M): # 떡 높이의 총합 sum이 떡의 길이 M보다 작으면 계속 반복
  for j in range(len(H)): # 입력한 떡의 개별 높이의 수만큼 반복
    if (set < H[j]): # 절단기 높이가 떡의 개별 높이보다 작으면
      m = H[j] - set # 절단된 떡의 길이
    else: # 절단기 높이가 떡의 개별 높이보다 크거나 같으면
      m = 0 # 절단된 떡의 길이는 0cm
    sum += m # 떡이 절단될 때마다 떡의 길이를 합침

  if (sum < M): # 절단된 떡 높이의 총합 sum이 손님이 요청한 떡의 길이 M보다 작으면
    sum = 0 # 떡 높이의 총합 0cm로 초기화
    set -= 1 # 절단기 높이 1cm 감소

print(set)
