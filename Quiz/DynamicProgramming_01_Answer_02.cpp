/*
<문제> 개미 전사 : 문제 설명
  - 개미 전사는 부족한 식량을 충당하고자 메뚜기 마을의 식량창고를 몰래 공격하려고 합니다. 메뚜기 마을에는 여러 개의 식량창고가 있는데 식량창고는 일직선으로 이어져 있습니다.
  - 각 식량창고에는 정해진 수의 식량을 저장하고 있으며 개미 전사는 식량창고를 선택적으로 약탈하여 식량을 빼앗을 예정입니다. 이때 메뚜기 정찰병들은 일직선상에 존재하는 식량창고 중에서 서로 인접한 식량창고가 공격받으면 바로 알아챌 수 있습니다.
  - 따라서 개미 전사가 정찰병에게 들키지 않고 식량창고를 약탈하기 위해서는 최소한 한 칸 이상 떨어진 식량창고를 약탈해야 합니다.
  - 예시) 창고 0 : 1, 창고 1 : 3, 창고 2 : 1, 창고 3 : 5

  - 예를 들어 식량창고 4 개가 다음과 같이 존재한다고 가정합시다.
    {1, 3, 1, 5}
  - 이때 개미 전사는 두 번째 식량창고와 네 번째 식량창고를 선택했을 때 최댓값인 총 8 개의 식량을 빼앗을 수 있습니다. 개미 전사는 식량창고가 이렇게 일직선상일 때 최대한 많은 식량을 얻기를 원합니다.
  - 개미 전사를 위해 식량창고 N 개에 대한 정보가 주어졌을 때 얻을 수 있는 식량의 최댓값을 구하는 프로그램을 작성하세요.


<문제> 개미 전사 : 문제 조건
  난이도 ●●○ | 풀이 시간 30 분 | 시간 제한 1 초 | 메모리 제한 128MB
  
  - 입력 조건
    - 첫째 줄에 식량창고의 개수 N이 주어집니다. (3 <= N <= 100)
    - 둘째 줄에 공백을 기준으로 각 식량창고에 저장된 식량의 개수 K가 주어집니다. (0 <= K <= 1,000)
  
  - 출력 조건
    - 첫째 줄에 개미 전사가 얻을 수 있는 식량의 최댓값을 출력하세요.


<문제> 개미 전사 : 문제 해결 아이디어
  - 예시를 확인해 봅시다. N = 4일 때, 다음과 같은 경우들이 존재할 수 있습니다.
    - 식량을 선택할 수 있는 경우의 수는 다음과 같이 8 가지입니다.
    - 7 번째 경우에서 8만큼의 식량을 얻을 수 있으므로 최적의 해는 8입니다.
      {(1), 3, 1, 5}, {1, (3), 1, 5}, {1, 3, (1), 5}, {1, 3, 1, (5)},
      {(1), 3, (1), 5}, {(1), 3, 1, (5)}, {1, (3), 1, (5)}, {1, 3, 1, 5}

  - a_i = i 번째 식량창고까지의 최적의 해 (얻을 수 있는 식량의 최댓값)
    - 이렇게 정의한다면 다이나믹 프로그래밍을 적용할 수 있습니다.
      창고 0 : 1, 창고 1 : 3, 창고 2 : 1, 창고 3 : 5
          ↓ 최적의 해 계산
      DP 테이블의 값 : a_0 = 1, a_1 = 3, a_2 = 3, a_3 = 8

  - 왼쪽부터 차례대로 식량창고를 턴다고 했을 때, 특정한 i 번째 식량창고에 대해서 털지 안 털지의 여부를 결정하면, 아래 2 가지 경우 중에서 더 많은 식량을 털 수 있는 경우를 선택하면 됩니다.
    □□□□□□■ (□) 현재 식량창고
    ■를 포함한 곳까지 i - 1, ■ 여기를 털면 현재 식량창고 털 수 없음
    □□□□□■□ (■) 현재 식량창고
    ■를 포함한 곳까지 i - 2, ■ 여기를 털면 현재 식량창고 털 수 있음

  - a_i = i 번째 식량창고까지의 최적의 해 (얻을 수 있는 식량의 최댓값)
  - k_i = i 번째 식량창고에 있는 식량의 양
  - 점화식은 다음과 같습니다.
    a_i = max(a_(i - 1), a_(i - 2) + k_i)
  - 한 칸 이상 떨어진 식량창고는 항상 털 수 있으므로 (i - 3) 번째 이하는 고려할 필요가 없습니다.
*/


// <문제> 개미 전사 : 답안 예시 (C++)

#include <bits/stdc++.h>

using namespace std;

// 앞서 계산된 결과를 저장하기 위한 DP 테이블 초기화
int d[100];
int n;
vector<int> arr;

int main(void) {
  cin >> n;
  for (int i = 0; i < n; i++) {
    int x;
    cin >> x;
    arr.push_back(x);
  }

  // 다이나믹 프로그래밍(Dynamic Programming) 진행 (보텀업)
  d[0] = arr[0];
  d[1] = max(arr[0], arr[1]);
  for (int i = 2; i < n; i++) {
    d[i] = max(d[i - 1], d[i - 2] + arr[i]);
  }
  cout << d[n - 1] << '\n';

  return 0;
}
