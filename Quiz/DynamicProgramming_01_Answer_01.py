"""
<문제> 개미 전사 : 문제 설명
  - 개미 전사는 부족한 식량을 충당하고자 메뚜기 마을의 식량창고를 몰래 공격하려고 합니다. 메뚜기 마을에는 여러 개의 식량창고가 있는데 식량창고는 일직선으로 이어져 있습니다.
  - 각 식량창고에는 정해진 수의 식량을 저장하고 있으며 개미 전사는 식량창고를 선택적으로 약탈하여 식량을 빼앗을 예정입니다. 이때 메뚜기 정찰병들은 일직선상에 존재하는 식량창고 중에서 서로 인접한 식량창고가 공격받으면 바로 알아챌 수 있습니다.
  - 따라서 개미 전사가 정찰병에게 들키지 않고 식량창고를 약탈하기 위해서는 최소한 한 칸 이상 떨어진 식량창고를 약탈해야 합니다.
  - 예시) 창고 0 : 1, 창고 1 : 3, 창고 2 : 1, 창고 3 : 5

  - 예를 들어 식량창고 4 개가 다음과 같이 존재한다고 가정합시다.
    {1, 3, 1, 5}
  - 이때 개미 전사는 두 번째 식량창고와 네 번째 식량창고를 선택했을 때 최댓값인 총 8 개의 식량을 빼앗을 수 있습니다. 개미 전사는 식량창고가 이렇게 일직선상일 때 최대한 많은 식량을 얻기를 원합니다.
  - 개미 전사를 위해 식량창고 N 개에 대한 정보가 주어졌을 때 얻을 수 있는 식량의 최댓값을 구하는 프로그램을 작성하세요.


<문제> 개미 전사 : 문제 조건
  난이도 ●●○ | 풀이 시간 30 분 | 시간 제한 1 초 | 메모리 제한 128MB
  
  - 입력 조건
    - 첫째 줄에 식량창고의 개수 N이 주어집니다. (3 <= N <= 100)
    - 둘째 줄에 공백을 기준으로 각 식량창고에 저장된 식량의 개수 K가 주어집니다. (0 <= K <= 1,000)
  
  - 출력 조건
    - 첫째 줄에 개미 전사가 얻을 수 있는 식량의 최댓값을 출력하세요.


<문제> 개미 전사 : 문제 해결 아이디어
  - 예시를 확인해 봅시다. N = 4일 때, 다음과 같은 경우들이 존재할 수 있습니다.
    - 식량을 선택할 수 있는 경우의 수는 다음과 같이 8 가지입니다.
    - 7 번째 경우에서 8만큼의 식량을 얻을 수 있으므로 최적의 해는 8입니다.
      {(1), 3, 1, 5}, {1, (3), 1, 5}, {1, 3, (1), 5}, {1, 3, 1, (5)},
      {(1), 3, (1), 5}, {(1), 3, 1, (5)}, {1, (3), 1, (5)}, {1, 3, 1, 5}

  - a_i = i 번째 식량창고까지의 최적의 해 (얻을 수 있는 식량의 최댓값)
    - 이렇게 정의한다면 다이나믹 프로그래밍을 적용할 수 있습니다.
      창고 0 : 1, 창고 1 : 3, 창고 2 : 1, 창고 3 : 5
          ↓ 최적의 해 계산
      DP 테이블의 값 : a_0 = 1, a_1 = 3, a_2 = 3, a_3 = 8

  - 왼쪽부터 차례대로 식량창고를 턴다고 했을 때, 특정한 i 번째 식량창고에 대해서 털지 안 털지의 여부를 결정하면, 아래 2 가지 경우 중에서 더 많은 식량을 털 수 있는 경우를 선택하면 됩니다.
    □□□□□□■ (□) 현재 식량창고
    ■를 포함한 곳까지 i - 1, ■ 여기를 털면 현재 식량창고 털 수 없음
    □□□□□■□ (■) 현재 식량창고
    ■를 포함한 곳까지 i - 2, ■ 여기를 털면 현재 식량창고 털 수 있음
      * 다이나믹 프로그래밍을 사용할 수 있는 조건 2 가지
        1. 최적 부분 구조 : 특정 번째까지의 최적의 해는 i - 1 번째, i - 2 번째까지의 최적의 해를 이용해서 계산될 수 있다. 즉, 이처럼 큰 문제를 해결하기 위해 이 작은 문제 2 개를 이용하는 것을 확인할 수 있다. 따라서 최적 부분 구조가 성립하는 것을 확인할 수 있다.
          → i - 3은 고려할 필요가 없다. 그 이유는 이미 이 앞쪽에서 이미 고려되었기 때문에 i - 3까지는 고려할 필요가 없고, 이 2 가지 경우에 대해서만 고려해서 현재 위치에 대한 optimal solution 값을 구할 수 있다.
        2. 중복되는 부분 문제

  - a_i = i 번째 식량창고까지의 최적의 해 (얻을 수 있는 식량의 최댓값)
  - k_i = i 번째 식량창고에 있는 식량의 양
  - 점화식은 다음과 같습니다.
    a_i = max(a_(i - 1), a_(i - 2) + k_i)
      * 이렇게 앞의 두 가지 경우를 확인해서 현재 문제를 해결할 수 있다는 점에서 최적 부분 구조가 성립하며, 이와 같이 점화식을 통해서 표현할 수 있는 것을 확인할 수 있다.
  - 한 칸 이상 떨어진 식량창고는 항상 털 수 있으므로 (i - 3) 번째 이하는 고려할 필요가 없습니다.
"""


# <문제> 개미 전사 : 답안 예시 (Python)

# 정수 N을 입력 받기
n = int(input())
# 모든 식량 정보 입력 받기
array = list(map(int, input().split()))

# 앞서 계산된 결과를 저장하기 위한 DP 테이블 초기화
d = [0] * 100

# 다이나믹 프로그래밍(Dynamic Programming) 진행 (보텀업)
d[0] = array[0]
d[1] = max(array[0], array[1])
for i in range(2, n):
  d[i] = max(d[i - 1], d[i - 2] + array[i])

# 계산된 결과 출력
print(d[n - 1])
