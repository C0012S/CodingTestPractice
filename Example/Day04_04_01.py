# 계수 정렬 소스 코드
# 특정한 조건이 부합할 때만 사용할 수 있지만 매우 빠르게 동작하는 정렬 알고리즘이다.
# 계수 정렬은 데이터의 크기 범위가 제한되어 정수 형태로 표현할 수 있을 때 사용 가능하다.
# 데이터의 개수가 N, 데이터(양수) 중 최댓값이 K일 때 최악의 경우에도 수행 시간 O(N + K)를 보장한다.
# 가장 작은 데이터부터 가장 큰 데이터까지의 모든 범위를 포함할 수 있는 크기의 배열을 만들어야 하기 때문에 상대적으로 공간 복잡도가 높지만, 퀵 정렬과 비교했을 때에도 조건만 만족한다면 더 빨리 동작한다는 점이 특징이다.

# 계수 정렬의 시간 복잡도와 공간 복잡도는 모두 O(N + K)이다.
  # 공간 복잡도는 정렬을 수행할 데이터의 개수 N, 데이터 중에서 가장 큰 값만큼의 크기를 가진 K만큼의 공간이 필요하다.
# 계수 정렬은 때에 따라서 심각한 비효율성을 초래할 수 있다.
  # 데이터가 0과 999,999로 단 2 개만 존재하는 경우를 생각해 본다.
# 계수 정렬은 동일한 값을 가지는 데이터가 여러 개 등장할 때 효과적으로 사용할 수 있다.
  # 성적의 경우 100 점을 맞은 학생이 여러 명일 수 있기 때문에 계수 정렬이 효과적이다.


# 모든 원소의 값이 0보다 크거나 같다고 가정
array = [7, 5, 9, 0, 3, 1, 6, 2, 9, 1, 4, 8, 0, 5, 2]
# 모든 범위를 포함하는 리스트 선언(모든 값은 0으로 초기화)
count = [0] * (max(array) + 1)

for i in range(len(array)):
  count[array[i]] += 1 # 각 데이터에 해당하는 인덱스의 값 증가

for i in range(len(count)): # 리스트에 기록된 정렬 정보 확인
  for j in range(count[i]):
    print(i, end=' ') # 띄어쓰기를 구분으로 등장한 횟수만큼 인덱스 출력