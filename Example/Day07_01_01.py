"""
최단 경로 문제
  - 최단 경로 알고리즘은 가장 짧은 경로를 찾는 알고리즘을 의미합니다.
  - 다양한 문제 상황
    - 한 지점에서 다른 한 지점까지의 최단 경로
    - 한 지점에서 다른 모든 지점까지의 최단 경로
    - 모든 지점에서 다른 모든 지점까지의 최단 경로
  - 각 지점은 그래프에서 노드로 표현
  - 지점 간 연결된 도로는 그래프에서 간선으로 표현


다익스트라 최단 경로 알고리즘 개요
  - 특정한 노드에서 출발하여 다른 모든 노드로 가는 최단 경로를 계산합니다.
  - 다익스트라 최단 경로 알고리즘은 음의 간선이 없을 때 정상적으로 동작합니다.
    - 현실 세계의 도로(간선)은 음의 간선으로 표현되지 않습니다.
      * 현실 세계의 도로는 음의 간선으로 표현되지 않기 때문에 현실 세계의 길 찾기 문제에서 사용될 수 있는 알고리즘이라고 할 수 있다.
  - 다익스트라 최단 경로 알고리즘은 그리디 알고리즘으로 분류됩니다.
    - 매 상황에서 가장 비용이 적은 노드를 선택해 임의의 과정을 반복합니다.
      * 기본적으로 최단 경로 문제는 다이나믹 프로그래밍 알고리즘으로 분류되기도 한다. A에서 C까지 가는 최단 경로에 B를 거쳐 가는 경로가 존재한다고 하면, A에서 B까지 가는 최단 경로와 B에서 C까지 가는 최단 경로를 모두 고려한, 그러한 경로로써 A에서 C까지 가는 최단 경로가 만들어지는 것으로 볼 수 있기 때문에 기본적으로 길 찾기 문제 자체는 다이나믹 프로그래밍의 원리가 적용된 문제라고 할 수 있다.
      * 다만 다익스트라 최단 경로 알고리즘은 기본적으로 길 찾기 문제 중에서도 이러한 탐욕적인 원리를 이용한다는 점에서 그리디 알고리즘으로 분류된다. 즉, 매 상황에서 아직 방문하지 않은 노드 중에서 가장 비용이 적은 노드를 골라서 특정 과정을 반복한다는 점에서 그리디 알고리즘으로 분류할 수 있다.


다익스트라 최단 경로 알고리즘
  - 알고리즘의 동작 과정은 다음과 같습니다.
    1. 출발 노드를 설정합니다.
    2. 최단 거리 테이블을 초기화합니다.
    3. 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드를 선택합니다.
      * 3 번 과정에서, 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드를 선택한다는 점에서 이 알고리즘을 그리디 알고리즘의 유형으로 볼 수 있으며, 이러한 그리디 알고리즘으로 이 문제를 해결할 수 있는 이유는 조금 이따 자세히 살펴 보겠지만 이처럼 3 번 과정을 통해 현재 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드를 선택하는 과정을 반복할 때마다 그렇게 선택된 노드까지의 최단 거리는 더 이상 바뀌지 않는다는 점 때문이다. 즉, 사실은 이처럼 매번 현재를 기준으로 하여 최단 거리가 가장 짧은 노드를 선택하는 과정을 반복할 때마다 특정 노드까지의 최단 거리를 확실히 결정하는 것과 같다고 볼 수 있다. 이러한 특징 때문에 우리는 매 상황마다 아직 방문하지 않은 노드 중에서 가장 최단 거리가 짧은 노드를 선택하는 것을 반복함으로써 모든 노드에 대해서 다 방문 처리가 끝났을 때 우리는 전체 노드까지의 모든 최단 거리를 알 수 있는 것이다.
    4. 해당 노드를 거쳐 다른 노드로 가는 비용을 계산하여 최단 거리 테이블을 갱신합니다.
      * 또한 이러한 다익스트라 알고리즘의 단순한 형태는 다음과 같이 출발 노드로부터 다른 모든 노드까지의 최단 거리를 구하는 것과 같다. 즉, 다익스트라 최단 경로 알고리즘이라 부르지만 단순히 이런 과정을 반복하게 되면 우리는 각 노드까지의 최단 거리만 알 수 있게 된다. 실제로 우리가 완전한 형태의 최단 경로까지 알기 위해서는 별도의 로직이 추가적으로 사용되어야 한다. 다만 완전한 형태의 최단 경로까지 모두 출력하라고 요구하는 경우는 일반적인 코딩 테스트 수준에서는 많이 출제되지 않기 때문에 본 교재에서는 이와 같이 단순히 출발 노드로부터 다른 모든 노드까지의 최단 거리 테이블을 구하는 것까지를 목표로 하여 알고리즘을 설계해서 구현해 보겠다.
    5. 위 과정에서 3 번과 4 번을 반복합니다.

  - 알고리즘 동작 과정에서 최단 거리 테이블은 각 노드에 대한 현재까지의 최단 거리 정보를 가지고 있습니다.
  - 처리 과정에서 더 짧은 경로를 찾으면 '이제부터는 이 경로가 제일 짧은 경로야'라고 갱신합니다.
    (출발) → 8 → (A)  A로 가는 최단 거리가 8인 것 같네.
      2 ↘  (B)  ↗ 5 
    (출발) → 8 → (A)  B를 거쳐 가면 A까지 7에 갈 수 있네!
      2 ↘  (B)  ↗ 5 


다익스트라 알고리즘 : 동작 과정 살펴보기
  - [초기 상태] 그래프를 준비하고 출발 노드를 설정합니다.
  - [Step 1] 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드인 1 번 노드를 처리합니다.
  - [Step 2] 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드인 4 번 노드를 처리합니다.
  - [Step 3] 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드인 2 번 노드를 처리합니다.
    * 아직 방문하지 않은 노드 2, 5가 같은 비용을 가지고 있다. 이럴 때는 어떤 노드를 선택해도 상관없지만 일반적으로는 더 번호가 낮은 노드부터 선택해서 처리할 수 있도록 한다.
    * 사실 여기에서 이미 방문 처리된 노드라면 무시하는 방법을 사용할 수도 있다. 왜냐하면 이미 방문 처리가 된 노드는 그 노드까지의 최단 거리 값이 이미 결정되어 바뀌지 않기 때문이다.
  - [Step 4] 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드인 5 번 노드를 처리합니다.
  - [Step 5] 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드인 3 번 노드를 처리합니다.
  - [Step 6] 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드인 6 번 노드를 처리합니다.
    * 사실 이 마지막 노드는 처리하지 않아도 괜찮다. 그 이유는 이미 앞서 확인했던 다른 노드까지의 이 최단 거리 값은 더 이상 바뀌지 않기 때문에 사실 다익스트라 알고리즘을 수행할 때, 이 마지막 노드에 대한 정보는 처리하지 않아도 전체 결과를 얻을 수 있다.
    * 다만 현재 예제에서는 6 번 노드로부터 출발하는 간선이 존재하지 않기 때문에 애초에 이동할 수 있는 인접 노드가 없어서 테이블이 갱신되지 않는 것 또한 확인할 수 있다.


다익스트라 알고리즘의 특징
  - 그리디 알고리즘 : 매 상황에서 방문하지 않은 가장 비용이 적은 노드를 선택해 임의의 과정을 반복합니다.
    * 여기서 임의의 과정이란 해당 노드를 거쳐 가는 각각의 경우를 확인해서 테이블을 갱신할지 안 할지를 결정하는 과정을 의미한다.
  - 단계를 거치며 한 번 처리된 노드의 최단 거리는 고정되어 더 이상 바뀌지 않습니다.
    - 한 단계당 하나의 노드에 대한 최단 거리를 확실히 찾는 것으로 이해할 수 있습니다.
      * 그렇기 때문에 이러한 그리디 알고리즘을 이용해서 최적의 해를 구할 수 있다.
  - 다익스트라 알고리즘을 수행한 뒤에 테이블의 각 노드까지의 최단 거리 정보가 저장됩니다.
    - 완벽한 형태의 최단 경로를 구하려면 소스코드에 추가적인 기능을 더 넣어야 합니다.


다익스트라 알고리즘 : 간단한 구현 방법
  - 단계마다 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드를 선택하기 위해 매 단계마다 1 차원 테이블의 모든 원소를 확인(순차 탐색)합니다.


다익스트라 알고리즘 : 간단한 구현 방법 성능 분석
  - 총 O(V) 번에 걸쳐서 최단 거리가 가장 짧은 노드를 매번 선형 탐색해야 합니다.
  - 따라서 전체 시간 복잡도는 O(V^2)입니다.
  - 일반적으로 코딩 테스트의 최단 경로 문제에서 전체 노드의 개수가 5,000 개 이하라면 이 코드로 문제를 해결할 수 있습니다.
    - 하지만 노드의 개수가 10,000 개를 넘어가는 문제라면 어떻게 해야 할까요?
      → 이와 같은 로직으로 코드를 작성했을 때, 단순히 계산해도 1 억 번 이상의 연산이 소요될 것을 예상할 수 있다. 그렇기 때문에 이처럼 간단한 방법으로 매번 최단 거리가 가장 짧은 노드를 선형 탐색하는 경우 시간 초과 판정을 받을 수 있기 때문에 더욱 효율적으로 동작하는 알고리즘을 설계할 필요가 있다.
      → 이를 위해 우선순위 큐 자료구조에 대해서 알아볼 필요가 있다.
"""


# 다익스트라 알고리즘 : 간단한 구현 방법 (Python)

import sys
input = sys.stdin.readline
INF = int(1e9) # 무한을 의미하는 값으로 10억을 설정

# 노드의 개수, 간선의 개수를 입력받기
n, m = map(int, input().split())
# 시작 노드 번호를 입력받기
start = int(input())
# 각 노드에 연결되어 있는 노드에 대한 정보를 담는 리스트를 만들기
graph = [[] for i in range(n + 1)]
# 방문한 적이 있는지 체크하는 목적의 리스트를 만들기
visited = [False] * (n + 1)
# 최단 거리 테이블을 모두 무한으로 초기화
distance = [INF] * (n + 1)

# 모든 간선 정보를 입력받기
for _ in range(m):
  a, b, c = map(int, input().split())
  # a 번 노드에서 b 번 노드로 가는 비용이 c라는 의미
  graph[a].append((b, c))

# 방문하지 않은 노드 중에서, 가장 최단 거리가 짧은 노드의 번호를 반환
def get_smallest_node():
  min_value = INF
  index = 0 # 가장 최단 거리가 짧은 노드(인덱스)
  for i in range(1, n + 1):
    if distance[i] < min_value and not visited[i]:
      min_value = distance[i]
      index = i
  return index

def dijkstra(start):
  # 시작 노드에 대해서 초기화
  distance[start] = 0
  visited[start] = True
  for j in graph[start]:
    distance[j[0]] = j[1]
  # 시작 노드를 제외한 전체 n - 1 개의 노드에 대해서 반복
  for i in range(n - 1):
    # 현재 최단 거리가 가장 짧은 노드를 꺼내서, 방문 처리
    now = get_smallest_node()
    visited[now] = True
    # 현재 노드와 연결된 다른 노드를 확인
    for j in graph[now]:
      cost = distance[now] + j[1]
      # 현재 노드를 거쳐서 다른 노드로 이동하는 거리가 더 짧은 경우
      if cost < distance[j[0]]:
        distance[j[0]] = cost

# 다익스트라 알고리즘을 수행
dijkstra(start)

# 모든 노드로 가기 위한 최단 거리를 출력
for i in range(1, n + 1):
  # 도달할 수 없는 경우, 무한(INFINITY)이라고 출력
  if distance[i] == INF:
    print("INFINITY")
  # 도달할 수 있는 경우 거리를 출력
  else:
    print(distance[i])
